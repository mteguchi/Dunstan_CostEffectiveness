# JAGS model for imputing missing hatchling counts at Raine Island

# The known cyclical nature of hatching is modeled by the discrete 
# Fourier series of one period per year.  Hatchling production starts
# December 20 and ends April 30 each season.  Observed counts are 
# limited so they are used to determine amplitude of each season
# and for each sector.  Amplitudes for sectors are correlated.

# First, tried with mvnorm but jags does not allow partially missing observations
# in mvnorm. So, changing it to five separate normals but a common slope
# parameter

model{

  for (yr in 1:n.years){
    for (j in 1:n.sectors){
       # Initial states
       X0[yr, j] ~ dnorm(mu.X0[yr, j], 1.0)  # make it pretty tight rather than trying to estimate var
       X[yr, j, 1] <- c[yr, day[1]] + X0[yr, j]  + eps.X[yr, j, 1]  # day 1 should be 12/21
       eps.X[yr, j, 1] ~ dnorm(0, tau.X)  # day 1 should be 12/21
      
       # observation
       y[yr,j,1] ~  dnorm(X[yr,j,1], tau.y)
                
       for (t in 2:n.steps){
           # state
           X[yr,j,t] <-  c[yr, day[t]] + X[yr, j, t-1]  + eps.X[yr, j, t]
           eps.X[yr,j,t] ~ dnorm(0, tau.X)

           # observation
           y[yr, j, t] ~ dnorm(X[yr, j,t], tau.y)
                
        }
    }
  }
      
  # c parameter defined here with a discrete Fourier function
  # n.days = from 12/21 to 4/30. Provide it through jags.data
  # also provide period (should be same as n.days) through jags.data

  for (yr in 1:n.years){
    for (d in 1:n.steps){
      #c.const[d] <-  2 * pi * d / period
      c[yr, d] <- beta.cos[yr] * cos(2 * pi * d / period) + beta.sin[yr] * sin(2 * pi * d / period)
    }
  }
  
  # priors
  for (yr in 1:n.years){
    beta.cos[yr] ~ dnorm(0, tau.cos)
    beta.sin[yr] ~ dnorm(0, tau.sin)
  }

  sigma.cos ~ dgamma(1, 0.1)
  sigma.sin ~ dgamma(1, 0.1)
  
  tau.cos <- 1/(sigma.cos * sigma.cos)
  tau.sin <- 1/(sigma.sin * sigma.sin)
  
  sigma.y ~ dgamma(1, 0.1)
  tau.y <- 1/(sigma.y * sigma.y)
  
  sigma.X ~ dgamma(1, 0.1)
  tau.X <- 1/(sigma.X * sigma.X)

}
